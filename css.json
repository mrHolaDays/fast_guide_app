{
  "CSS": {
    "Core Concepts": {
      "Selectors": "Используются для выбора HTML-элементов, к которым будут применяться стили. Селекторы определяют, какие именно элементы будут затронуты стилем (например, `p`, `.class`, `#id`).",
      "Properties": "Характеристики, которые изменяют внешний вид и поведение элементов. Свойства определяют, что именно мы хотим изменить (например, `color`, `font-size`, `margin`, `background-color`, `display`).",
      "Values": "Конкретные значения, присваиваемые свойствам. Значения определяют, как именно будет выглядеть или вести себя элемент. Типы значений включают ключевые слова (например, `red`, `bold`), числа (например, `16px`, `0.5`), проценты (например, `50%`), URL (например, `url('image.jpg')`) и другие (например, `rgba()`, `hsl()`).",
      "Declaration Block": "Совокупность свойств и их значений, заключенная в фигурные скобки `{}`. Блок деклараций определяет набор стилей, применяемых к выбранным элементам (например, `{ color: red; font-size: 16px; padding: 10px; }`).",
      "Ruleset": "Сочетание селектора и блока деклараций. Правило CSS определяет, какие элементы выбираются (селектор) и какие стили к ним применяются (блок деклараций). Каждый ruleset состоит из selector(s) и a declaration block (например, `p { color: red; font-size: 16px; }`).",
      "Comments": "Позволяют добавлять заметки в код, которые не влияют на отображение в браузере. Комментарии используются для документирования кода, объяснения его работы и предотвращения выполнения определенных частей кода. Комментарии игнорируются браузером и не отображаются на странице (например, `/* Это комментарий */`, `/* Многострочный\n комментарий */`)."
    },
    "Selectors": {
      "Type Selector": "Выбирает все элементы по имени тега. Это один из самых простых способов выбора элементов. Примеры: `p { ... }` (выбирает все `<p>` элементы), `h1 { ... }` (выбирает все `<h1>` элементы).",
      "Class Selector": "Выбирает элементы по значению атрибута `class`. Классы позволяют применять стили к нескольким элементам одновременно и являются многоразовыми. Примеры: `.my-class { ... }` (выбирает все элементы с классом `my-class`), `.button { background-color: blue; }` (стилизует кнопки). Используется точка `.` перед именем класса.",
      "ID Selector": "Выбирает один уникальный элемент по значению атрибута `id`. Идентификаторы должны быть уникальными в пределах HTML-документа. Обычно используются для JavaScript или конкретных стилей. Примеры: `#my-id { ... }` (выбирает элемент с `id=\"my-id\"`), `#header { width: 100%; }` (стилизует элемент с `id=\"header\"`). Используется `#` перед именем ID.",
      "Universal Selector": "Выбирает все элементы на странице. Часто используется для задания базовых стилей, но может снижать производительность. Примеры: `* { margin: 0; padding: 0; box-sizing: border-box; }` (сбрасывает отступы и padding, устанавливает box-sizing).",
      "Attribute Selector": "Выбирает элементы по значению атрибута. Позволяет выбирать элементы на основе их атрибутов и значений. Примеры: `[type='text'] { ... }` (выбирает все элементы с атрибутом `type=\"text\"`), `[href^='https'] { ... }` (выбирает все элементы с атрибутом `href`, начинающимся с 'https' - для безопасных ссылок), `[title*='example'] { ... }` (выбирает элементы с атрибутом `title`, содержащим 'example').",
      "Grouping Selector": "Применяет одни и те же стили к нескольким селекторам, разделяя их запятой. Упрощает код, избегая повторений. Примеры: `h1, h2, h3 { color: navy; }` (применяет один и тот же цвет к заголовкам), `.important, #main-content { font-weight: bold; }`.",
      "Descendant Selector": "Выбирает элементы, являющиеся потомками другого элемента. Выбирает все элементы, которые находятся внутри другого элемента, независимо от уровня вложенности. Примеры: `div p { color: red; }` (выбирает все `<p>` элементы, находящиеся внутри `<div>`), `nav a { text-decoration: none; }` (удаляет подчеркивание у ссылок в навигации). Пробел между селекторами.",
      "Child Selector": "Выбирает элементы, являющиеся прямыми детьми другого элемента. Выбирает только те элементы, которые непосредственно вложены в родительский элемент. Примеры: `div > p { color: green; }` (выбирает только `<p>` элементы, которые являются непосредственными детьми `<div>`), `ul > li { margin-bottom: 10px; }` (стилизует только прямые `<li>` элементы в `<ul>`). Знак `>` между селекторами.",
      "Adjacent Sibling Selector": "Выбирает элемент, следующий непосредственно за другим элементом на том же уровне. Выбирает элемент, который является следующим братом (sibling) после другого элемента. Примеры: `h1 + p { margin-top: 0; }` (убирает отступ сверху у `<p>` элемента, который следует сразу после `<h1>`), `img + p { font-style: italic; }` (делает текст после картинки курсивом). Знак `+` между селекторами.",
      "General Sibling Selector": "Выбирает все элементы, следующие за другим элементом на том же уровне. Выбирает все элементы, которые являются братьями (siblings) после другого элемента. Примеры: `h1 ~ p { font-size: 1.2em; }` (увеличивает размер шрифта у всех `<p>` элементов после `<h1>`), `img ~ p { color: gray; }` (делает текст после картинки серым). Знак `~` между селекторами.",
      "Pseudo-class": "Добавляет стили к определенному состоянию элемента. Псевдоклассы позволяют стилизовать элементы в зависимости от их состояния, например, при наведении курсора мыши или при нажатии. Примеры: `:hover { ... }` (стили при наведении курсора), `:active { ... }` (стили при активации (например, при нажатии)), `:visited { ... }` (стили для посещенных ссылок), `:focus { ... }` (стили при получении фокуса), `:first-child { ... }` (стили для первого дочернего элемента), `:last-child { ... }` (стили для последнего дочернего элемента), `:nth-child(n) { ... }` (стили для каждого n-ного дочернего элемента), `:nth-of-type(n) { ... }` (стили для каждого n-ного дочернего элемента определенного типа).",
      "Pseudo-element": "Стилизует определенную часть элемента. Псевдоэлементы позволяют стилизовать отдельные части элемента, такие как первая строка текста или содержимое перед или после элемента. Примеры: `::before { ... }` (стили для элемента перед контентом), `::after { ... }` (стили для элемента после контента), `::first-line { ... }` (стили для первой строки текста), `::first-letter { ... }` (стили для первой буквы текста), `::selection { ... }` (стили для выделенного текста). Используются два двоеточия `::`."
    },
    "Box Model": {
      "Content": "Содержимое элемента, которое включает в себя текст, изображения, видео и другие элементы. Размер содержимого зависит от свойств `width` и `height` (или от внутреннего содержимого, если ширина и высота не заданы).",
      "Padding": "Пространство между содержимым и границей элемента. Padding создает внутренний отступ, увеличивая общую занимаемую элементом площадь. Настраивается свойствами `padding-top`, `padding-right`, `padding-bottom`, `padding-left` (или сокращенным свойством `padding`).",
      "Border": "Граница вокруг элемента. Border имеет ширину, стиль и цвет. Настраивается свойствами `border-width`, `border-style`, `border-color` (или сокращенным свойством `border`).",
      "Margin": "Пространство за пределами границы элемента. Margin создает внешний отступ, отделяя элемент от других элементов на странице. Настраивается свойствами `margin-top`, `margin-right`, `margin-bottom`, `margin-left` (или сокращенным свойством `margin`). Margin может схлопываться в некоторых ситуациях (например, вертикальные margins смежных блоков).",
      "Width": "Ширина содержимого элемента. Свойства `width` (задает ширину) и `max-width` / `min-width` (задает максимальную и минимальную ширину соответственно).",
      "Height": "Высота содержимого элемента. Свойства `height` (задает высоту) и `max-height` / `min-height` (задает максимальную и минимальную высоту соответственно)."
    },
    "Text Formatting": {
      "color": "Задает цвет текста. Может принимать значения: ключевые слова (например, `red`, `blue`, `green`), шестнадцатеричные коды (например, `#FF0000`, `#0000FF`), RGB значения (например, `rgb(255, 0, 0)`), RGBA значения (например, `rgba(255, 0, 0, 0.5)`), HSL значения (например, `hsl(0, 100%, 50%)`), HSLA значения (например, `hsla(0, 100%, 50%, 0.5)`).",
      "font-family": "Задает семейство шрифтов. Можно указать несколько шрифтов (через запятую), чтобы браузер использовал следующий доступный шрифт, если предыдущий не найден. Пример: `font-family: Arial, sans-serif;` (использует Arial, если доступен, иначе sans-serif).",
      "font-size": "Задает размер шрифта. Может принимать значения: абсолютные размеры (например, `16px`, `12pt`), относительные размеры (например, `em`, `rem`, `%`), ключевые слова (например, `small`, `medium`, `large`).",
      "font-weight": "Задает жирность шрифта. Может принимать значения: ключевые слова (например, `normal`, `bold`, `lighter`, `bolder`), числа (например, `100`, `200`, `300`, `400` (normal), `700` (bold), `900`).",
      "font-style": "Задает стиль шрифта. Может принимать значения: `normal` (обычный), `italic` (курсив), `oblique` (наклонный - может быть стилистически похож на `italic`).",
      "text-align": "Задает выравнивание текста по горизонтали. Может принимать значения: `left` (выравнивание по левому краю), `right` (выравнивание по правому краю), `center` (выравнивание по центру), `justify` (выравнивание по ширине, текст выравнивается по левому и правому краям, добавляются пробелы между словами).",
      "text-decoration": "Задает оформление текста (например, подчеркивание, зачеркивание, надчеркивание). Может принимать значения: `none` (отсутствие оформления), `underline` (подчеркивание), `overline` (надчеркивание), `line-through` (зачеркивание), `blink` (мигание - не рекомендуется).",
      "text-transform": "Задает преобразование текста (например, к верхнему регистру, нижнему регистру, капитализация). Может принимать значения: `uppercase` (все буквы в верхнем регистре), `lowercase` (все буквы в нижнем регистре), `capitalize` (первая буква каждого слова в верхнем регистре), `none` (без преобразования).",
      "letter-spacing": "Задает интервал между буквами. Может принимать значения: числовые значения с единицами измерения (например, `2px`, `0.1em`, `-1px` (отрицательное значение - сжатие)), `normal` (по умолчанию).",
      "word-spacing": "Задает интервал между словами. Может принимать значения: числовые значения с единицами измерения (например, `5px`, `0.2em`), `normal` (по умолчанию).",
      "line-height": "Задает высоту строки. Может принимать значения: число (без единиц измерения, относительно font-size), число с единицами измерения (например, `24px`, `1.5em`, `150%`), `normal` (по умолчанию, зависит от шрифта).",
      "text-indent": "Задает отступ первой строки текста. Может принимать значения: числовые значения с единицами измерения (например, `20px`, `1em`), проценты (относительно ширины родительского элемента).",
      "text-shadow": "Добавляет тень к тексту. Принимает значения: горизонтальное смещение (обязательно), вертикальное смещение (обязательно), размытие (необязательно), цвет (обязательно). Пример: `text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);`.",
      "white-space": "Управляет обработкой пробелов и переносов строк. Может принимать значения: `normal` (пробелы и переносы строк игнорируются, текст переносится по необходимости), `nowrap` (текст не переносится, отображается в одну строку), `pre` (пробелы и переносы строк сохраняются, как в `<pre>`), `pre-wrap` (пробелы и переносы строк сохраняются, текст переносится по необходимости), `pre-line` (пробелы игнорируются, переносы строк сохраняются, текст переносится по необходимости)."
    },
    "Colors and Backgrounds": {
      "color": "Задает цвет текста.",
      "background-color": "Задает цвет фона элемента. Может принимать значения: ключевые слова, шестнадцатеричные коды, RGB, RGBA, HSL, HSLA.",
      "background-image": "Задает фоновое изображение. Может принимать значения: `url('image.jpg')` (ссылка на изображение), `none` (нет изображения).",
      "background-repeat": "Задает повторение фонового изображения. Может принимать значения: `repeat` (повтор по горизонтали и вертикали), `no-repeat` (нет повтора), `repeat-x` (повтор по горизонтали), `repeat-y` (повтор по вертикали), `space` (изображения располагаются внутри контейнера с пробелами между ними), `round` (изображения масштабируются для заполнения пространства без обрезки).",
      "background-position": "Задает положение фонового изображения. Может принимать значения: ключевые слова (`top`, `bottom`, `left`, `right`, `center`), проценты (например, `50% 50%`), пиксели (например, `10px 20px`).",
      "background-size": "Задает размер фонового изображения. Может принимать значения: `cover` (изображение масштабируется так, чтобы полностью заполнить область и покрыть её, обрезка может происходить), `contain` (изображение масштабируется так, чтобы поместиться в область, оставляя пустое пространство), `auto` (размер изображения определяется браузером), ширина и высота (например, `100px 50px`).",
      "background-attachment": "Задает, как фоновое изображение прикреплено к элементу. Может принимать значения: `scroll` (изображение прокручивается вместе с содержимым (по умолчанию)), `fixed` (изображение остается на месте при прокрутке), `local` (изображение прокручивается вместе с содержимым элемента).",
      "background": "Сокращенное свойство для установки всех свойств фона. Порядок значений: `background-color`, `background-image`, `background-repeat`, `background-position`, `/ background-size`, `background-attachment`. Пример: `background: red url('image.jpg') no-repeat top left / cover fixed;`.",
      "opacity": "Задает прозрачность элемента. Значение от 0.0 (полностью прозрачный) до 1.0 (полностью непрозрачный).",
      "rgba()": "Функция для определения цвета с альфа-каналом. Пример: `rgba(255, 0, 0, 0.5);` (красный цвет с 50% прозрачностью).",
      "linear-gradient()": "Функция для создания линейного градиента. Пример: `linear-gradient(to right, red, yellow);` (градиент от красного к желтому, слева направо).",
      "radial-gradient()": "Функция для создания радиального градиента. Пример: `radial-gradient(circle, red, yellow);` (радиальный градиент от красного к желтому)."
    },
    "Box Sizing": {
      "box-sizing": "Задает, как ширина и высота элемента рассчитываются.",
      "content-box": "Размер элемента рассчитывается на основе только его содержимого. Значения padding и border добавляются к ширине и высоте. (По умолчанию)",
      "border-box": "Размер элемента рассчитывается на основе ширины и высоты, включая padding и border. Содержимое подстраивается под это.",
      "padding": "Дополнительное пространство внутри элемента."
    },
    "Display": {
      "display": "Задает способ отображения элемента. Влияет на то, как элемент взаимодействует с другими элементами и как он занимает пространство.",
      "block": "Элемент отображается как блочный элемент. Занимает всю доступную ширину, имеет отступы сверху и снизу, игнорирует `width` и `height`. Примеры: `<p>`, `<h1>`, `<div>` (по умолчанию).",
      "inline": "Элемент отображается как строчный элемент. Занимает только необходимую ширину, игнорирует `width`, `height`, `margin-top`, `margin-bottom`. Примеры: `<span>`, `<a>`, `<img>` (по умолчанию).",
      "inline-block": "Элемент отображается как строчно-блочный элемент. Сочетает свойства `inline` (отображается в строку с другими элементами) и `block` (можно задать `width`, `height`, `margin`, `padding`).",
      "none": "Элемент не отображается. Скрывает элемент из видимости, как будто его нет вообще. Не занимает места в layout.",
      "flex": "Элемент отображается как flex-контейнер. Используется для гибкой верстки (Flexbox).",
      "grid": "Элемент отображается как grid-контейнер. Используется для создания сложных сеток (Grid Layout).",
      "table": "Элемент отображается как таблица. Используется для структурирования данных в табличной форме. Другие значения `display`, связанные с таблицами: `table-row`, `table-cell`, `table-header-group`, `table-footer-group` и т.д."
    },
    "Positioning": {
      "position": "Задает тип позиционирования элемента. Определяет, как элемент располагается относительно других элементов и окна браузера.",
      "static": "По умолчанию. Элемент не позиционируется, отображается в обычном потоке документа. Свойства `top`, `right`, `bottom`, `left`, `z-index` не влияют.",
      "relative": "Элемент позиционируется относительно своего нормального положения в потоке документа. Используются свойства `top`, `right`, `bottom`, `left` для смещения относительно его исходного положения. Не влияет на расположение других элементов.",
      "absolute": "Элемент позиционируется относительно ближайшего позиционированного родителя (родителя с `position: relative`, `position: absolute`, `position: fixed` или `position: sticky`). Если нет позиционированного родителя, элемент позиционируется относительно начального блока (обычно, окна браузера). Удаляется из потока документа, что может влиять на расположение других элементов.",
      "fixed": "Элемент позиционируется относительно окна браузера. Остается на месте при прокрутке страницы. Удаляется из потока документа, что может влиять на расположение других элементов.",
      "sticky": "Элемент ведет себя как `relative` до тех пор, пока не достигнет определенной точки прокрутки, после чего становится `fixed`. Пример: заголовки разделов, которые остаются видимыми при прокрутке.",
      "top": "Свойство позиционирования, определяющее расстояние от верхнего края. Используется совместно с `position`.",
      "right": "Свойство позиционирования, определяющее расстояние от правого края. Используется совместно с `position`.",
      "bottom": "Свойство позиционирования, определяющее расстояние от нижнего края. Используется совместно с `position`.",
      "left": "Свойство позиционирования, определяющее расстояние от левого края. Используется совместно с `position`.",
      "z-index": "Задает порядок наложения позиционированных элементов (работает только для элементов с `position` отличным от `static`). Элементы с большим `z-index` отображаются поверх. Может принимать положительные, отрицательные и нулевые значения."
    },
    "Floats": {
      "float": "Задает, как элемент должен обтекать другие элементы. Используется для размещения элементов рядом друг с другом, например, для создания макета с колонками.",
      "left": "Элемент прижимается к левому краю и обтекается другими элементами справа.",
      "right": "Элемент прижимается к правому краю и обтекается другими элементами слева.",
      "none": "Элемент не обтекает другие элементы (по умолчанию).",
      "clear": "Указывает, какие стороны элемента не должны обтекаться другими элементами. Используется для предотвращения наложения элементов. Значения: `left` (элемент не обтекается элементами с `float: left`), `right` (элемент не обтекается элементами с `float: right`), `both` (элемент не обтекается элементами с `float: left` и `float: right`), `none` (по умолчанию)."
    },
    "Flexbox": {
      "display: flex": "Превращает элемент в flex-контейнер. Все прямые потомки этого элемента становятся flex-элементами.",
      "flex-direction": "Определяет направление расположения flex-элементов. Может принимать значения: `row` (flex-элементы располагаются в строку (по умолчанию)), `row-reverse` (в строку, но в обратном порядке), `column` (в столбец), `column-reverse` (в столбец, в обратном порядке).",
      "flex-wrap": "Определяет, должны ли flex-элементы переноситься на новую строку, если они не помещаются в контейнер. Может принимать значения: `nowrap` (не переносятся (по умолчанию)), `wrap` (переносятся), `wrap-reverse` (переносятся в обратном порядке).",
      "justify-content": "Выравнивает flex-элементы по главной оси (ось, вдоль которой располагаются flex-элементы). Может принимать значения: `flex-start` (выравнивание по началу главной оси), `flex-end` (выравнивание по концу главной оси), `center` (выравнивание по центру главной оси), `space-between` (равномерное распределение пространства между элементами), `space-around` (равномерное распределение пространства вокруг элементов), `space-evenly` (равномерное распределение пространства между элементами, включая края).",
      "align-items": "Выравнивает flex-элементы по поперечной оси (ось, перпендикулярная главной оси). Может принимать значения: `flex-start` (выравнивание по началу поперечной оси), `flex-end` (выравнивание по концу поперечной оси), `center` (выравнивание по центру поперечной оси), `baseline` (выравнивание по базовой линии текста), `stretch` (растягивание элементов на всю высоту поперечной оси (по умолчанию)).",
      "align-content": "Выравнивает строки flex-элементов по поперечной оси (при наличии нескольких строк, когда `flex-wrap: wrap`). Работает только, когда у контейнера есть несколько строк flex-элементов. Может принимать значения: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `stretch` (как и у `justify-content`).",
      "flex-grow": "Определяет, как flex-элемент должен увеличиваться, чтобы занять доступное пространство. Числовое значение (по умолчанию 0).",
      "flex-shrink": "Определяет, как flex-элемент должен уменьшаться, чтобы уместиться в контейнер. Числовое значение (по умолчанию 1).",
      "flex-basis": "Определяет начальный размер flex-элемента, прежде чем будет распределено свободное пространство. Может принимать значения: `auto`, `content`, ширина (например, `300px`).",
      "order": "Определяет порядок отображения flex-элементов. Целочисленное значение. Элементы с меньшим `order` отображаются раньше.",
      "align-self": "Переопределяет свойство `align-items` для отдельного flex-элемента. Принимает те же значения, что и `align-items`."
    },
    "Grid Layout": {
      "display: grid": "Превращает элемент в grid-контейнер. Все прямые потомки становятся grid-элементами.",
      "grid-template-columns": "Определяет количество и размеры столбцов в сетке. Значения: размеры (например, `100px`, `1fr`), ключевые слова (например, `auto`), комбинации (например, `1fr 2fr 100px`), `repeat()` (для повторения шаблона). `fr` (fractional unit) - единица, представляющая дробную часть свободного пространства.",
      "grid-template-rows": "Определяет количество и размеры строк в сетке. Значения: размеры, ключевые слова, комбинации, `repeat()` (аналогично `grid-template-columns`).",
      "grid-template-areas": "Определяет именованные области в сетке. Позволяет создавать макеты, определяя имена для ячеек сетки и используя их для расположения элементов.",
      "grid-column-gap": "Задает промежуток между столбцами (устаревшее, используйте `column-gap`).",
      "grid-row-gap": "Задает промежуток между строками (устаревшее, используйте `row-gap`).",
      "grid-gap": "Сокращенное свойство для установки промежутков между строками и столбцами (устаревшее, используйте `gap`).",
      "column-gap": "Задает промежуток между столбцами. Размер зазора между столбцами сетки.",
      "row-gap": "Задает промежуток между строками. Размер зазора между строками сетки.",
      "gap": "Сокращенное свойство для установки промежутков между строками и столбцами. Сначала указывается `row-gap`, затем `column-gap`.",
      "grid-column-start": "Определяет, с какого столбца начинается элемент. Число (номер линии сетки), имя области, ключевое слово `auto`.",
      "grid-column-end": "Определяет, на каком столбце заканчивается элемент. Число (номер линии сетки), имя области, ключевое слово `auto`.",
      "grid-row-start": "Определяет, с какой строки начинается элемент. Число (номер линии сетки), имя области, ключевое слово `auto`.",
      "grid-row-end": "Определяет, на какой строке заканчивается элемент. Число (номер линии сетки), имя области, ключевое слово `auto`.",
      "grid-column": "Сокращенное свойство для `grid-column-start` и `grid-column-end`. Пример: `grid-column: 2 / 4;` (начинается со второй линии, заканчивается на четвертой).",
      "grid-row": "Сокращенное свойство для `grid-row-start` и `grid-row-end`.",
      "grid-area": "Определяет имя области сетки, к которой принадлежит элемент. Также может использоваться для определения местоположения элемента (как сокращение для `grid-row-start`, `grid-column-start`, `grid-row-end`, `grid-column-end`).",
      "justify-items": "Выравнивание элементов по горизонтали (главная ось) внутри ячеек сетки. Может принимать значения: `start`, `end`, `center`, `stretch`.",
      "align-items": "Выравнивание элементов по вертикали (поперечная ось) внутри ячеек сетки. Может принимать значения: `start`, `end`, `center`, `stretch`, `baseline`.",
      "justify-content": "Выравнивание всего содержимого контейнера по горизонтали (главная ось), когда общий размер контента меньше размера контейнера. Может принимать значения: `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`.",
      "align-content": "Выравнивание всего содержимого контейнера по вертикали (поперечная ось), когда общий размер контента меньше размера контейнера. Может принимать значения: `start`, `end`, `center`, `space-between`, `space-around`, `stretch`.",
      "justify-self": "Выравнивание отдельного элемента по горизонтали (главная ось) внутри его ячейки. Принимает те же значения, что и `justify-items`.",
      "align-self": "Выравнивание отдельного элемента по вертикали (поперечная ось) внутри его ячейки. Принимает те же значения, что и `align-items`.",
      "grid-auto-columns": "Определяет размер неявно создаваемых столбцов (столбцы, которые создаются, когда элементы выходят за пределы явно заданных столбцов).",
      "grid-auto-rows": "Определяет размер неявно создаваемых строк (аналогично `grid-auto-columns`).",
      "grid-auto-flow": "Определяет, как неявно созданные элементы размещаются в сетке. Может принимать значения: `row` (по строкам (по умолчанию)), `column` (по столбцам), `row dense`, `column dense` (пытается заполнить пробелы)."
    },
    "Transitions": {
      "transition-property": "Определяет CSS-свойства, к которым применяется transition. Может принимать значения: `all` (применяется ко всем изменяющимся свойствам), список свойств (например, `color, opacity`), `none` (отключает transition).",
      "transition-duration": "Определяет продолжительность transition. Время, за которое произойдет переход. Значение: в секундах (s) или миллисекундах (ms).",
      "transition-timing-function": "Определяет функцию времени для transition. Управляет скоростью перехода. Может принимать значения: `ease` (по умолчанию, медленно в начале и в конце), `linear` (равномерная скорость), `ease-in` (медленное начало), `ease-out` (медленный конец), `ease-in-out` (медленное начало и конец), `cubic-bezier(n,n,n,n)` (пользовательская кривая Безье).",
      "transition-delay": "Определяет задержку перед началом transition. Время, через которое начнется переход. Значение: в секундах (s) или миллисекундах (ms).",
      "transition": "Сокращенное свойство для всех свойств transition. Порядок: `transition-property`, `transition-duration`, `transition-timing-function`, `transition-delay`. Пример: `transition: color 0.5s ease 1s;` (переход цвета за 0.5 секунды с задержкой 1 секунда). Можно указать несколько transition через запятую."
    },
    "Transforms": {
      "transform": "Применяет 2D или 3D преобразования к элементу. Объединяет несколько преобразований, разделяя их пробелами.",
      "translate()": "Перемещает элемент по горизонтали и/или вертикали. Пример: `transform: translate(10px, 20px);` (перемещает элемент на 10px вправо и 20px вниз).",
      "scale()": "Изменяет размер элемента. Пример: `transform: scale(1.5);` (увеличивает размер элемента в 1.5 раза), `transform: scale(0.5, 0.8);` (масштабирует по ширине в 0.5 и по высоте в 0.8).",
      "rotate()": "Поворачивает элемент вокруг его центра. Пример: `transform: rotate(45deg);` (поворачивает элемент на 45 градусов по часовой стрелке).",
      "skew()": "Наклоняет элемент по горизонтали и/или вертикали. Пример: `transform: skew(20deg, 10deg);` (наклоняет элемент на 20 градусов по горизонтали и 10 градусов по вертикали).",
      "matrix()": "Применяет матрицу 2D преобразования. Более сложный способ, позволяет добиться сложных преобразований, но требует понимания математики матриц. Пример: `transform: matrix(1, 0, 0, 1, 50, 100);`."
    },
    "Animations": {
      "animation-name": "Определяет имя анимации (ссылка на `@keyframes`).",
      "animation-duration": "Определяет продолжительность анимации. Значение: в секундах (s) или миллисекундах (ms).",
      "animation-timing-function": "Определяет функцию времени для анимации (как transition). Управляет скоростью анимации. Может принимать значения: `ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`, `cubic-bezier(n,n,n,n)`.",
      "animation-delay": "Определяет задержку перед началом анимации. Значение: в секундах (s) или миллисекундах (ms).",
      "animation-iteration-count": "Определяет количество повторений анимации. Может принимать значения: число (количество повторов), `infinite` (бесконечное повторение).",
      "animation-direction": "Определяет направление воспроизведения анимации. Может принимать значения: `normal` (воспроизведение в обычном направлении (по умолчанию)), `reverse` (в обратном направлении), `alternate` (чередование: прямое, обратное), `alternate-reverse` (чередование: обратное, прямое).",
          "animation-fill-mode": "Определяет, как стили применяются до и после анимации. Может принимать значения: `none` (по умолчанию, не влияет), `forwards` (применяет стили последнего кадра), `backwards` (применяет стили первого кадра), `both` (комбинация `forwards` и `backwards`).",
          "animation-play-state": "Определяет, находится ли анимация в состоянии воспроизведения или приостановлена. Может принимать значения: `running` (воспроизводится (по умолчанию)), `paused` (приостановлена).",
          "animation": "Сокращенное свойство для всех свойств анимации. Порядок: `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, `animation-play-state`. Пример: `animation: myAnimation 3s linear 1s infinite alternate;`.",
          "@keyframes": "Определяет ключевые кадры для анимации. Ключевые кадры определяют состояние элемента в разные моменты времени анимации. Пример: `@keyframes myAnimation { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } }`."
        },
        "Media Queries": {
          "@media": "Определяет стили, применяемые в зависимости от условий. Используется для адаптивного дизайна.",
          "min-width": "Применяет стили, когда ширина экрана больше или равна указанному значению. Пример: `@media (min-width: 768px) { .container { width: 750px; } }`.",
          "max-width": "Применяет стили, когда ширина экрана меньше или равна указанному значению. Пример: `@media (max-width: 767px) { .container { width: 100%; } }`.",
          "min-height": "Применяет стили, когда высота экрана больше или равна указанному значению.",
          "max-height": "Применяет стили, когда высота экрана меньше или равна указанному значению.",
          "orientation": "Применяет стили в зависимости от ориентации устройства. Может принимать значения: `portrait` (портретная ориентация), `landscape` (альбомная ориентация). Пример: `@media (orientation: landscape) { body { background-color: blue; } }`.",
          "aspect-ratio": "Применяет стили в зависимости от соотношения сторон экрана. Пример: `@media (aspect-ratio: 16/9) { ... }`.",
          "prefers-reduced-motion": "Применяет стили, если пользователь предпочитает уменьшенную анимацию (настройки операционной системы). Пример: `@media (prefers-reduced-motion: reduce) { * { transition: none; } }`.",
          "prefers-color-scheme": "Применяет стили в зависимости от предпочтений пользователя по цветовой схеме. Может принимать значения: `light`, `dark`, `no-preference`. Пример: `@media (prefers-color-scheme: dark) { body { background-color: #333; color: #fff; } }`.",
          "resolution": "Применяет стили в зависимости от разрешения экрана (DPI). Пример: `@media (resolution: 2dppx) { ... }`.",
          "hover": "Применяет стили в зависимости от возможности наведения курсора мыши. Может принимать значения: `hover` (поддерживает наведение), `none` (не поддерживает наведение).",
          "pointer": "Применяет стили в зависимости от типа устройства ввода (мышь, сенсорный экран и т.д.). Может принимать значения: `fine` (точное устройство, например, мышь), `coarse` (грубое устройство, например, сенсорный экран), `none` (нет устройства ввода)."
        },
        "Specificity": {
          "Inline Styles": "Стили, примененные непосредственно к HTML-элементу (самая высокая специфичность). Переопределяют все другие стили.",
          "ID Selectors": "Селекторы с идентификаторами (например, `#myId`). Имеют более высокую специфичность, чем классы и теги.",
          "Class Selectors, Attribute Selectors, Pseudo-classes": "Селекторы классов, атрибутов и псевдоклассов (например, `.myClass`, `[type='text']`, `:hover`). Имеют более высокую специфичность, чем теги.",
          "Type Selectors": "Селекторы по имени тега (например, `p`). Самая низкая специфичность.",
          "Universal Selector, Combinators, Pseudo-elements": "Универсальный селектор (`*`), комбинаторы (`+`, `>`, `~`, ` ` (пробел)), псевдоэлементы (`::before`, `::after`). Не влияют на специфичность, но влияют на порядок применения стилей.",
          "!important": "Переопределяет все остальные правила. Следует использовать с осторожностью, так как может усложнить поддержку стилей.  Стили с `!important` имеют самый высокий приоритет и переопределяют все остальные, даже inline стили.  Не рекомендуется использовать `!important` часто, так как это может затруднить отладку и внесение изменений в будущем.",
          "Specificity Calculation": "Специфичность определяется в порядке: 1. Inline styles (1000) 2. IDs (0100) 3. Classes, Attributes, Pseudo-classes (0010) 4. Elements (0001). Комбинация правил складывается. При одинаковой специфичности применяется правило, объявленное позже."
        },
        "CSS Variables (Custom Properties)": {
          "--variable-name": "Определение переменной. Имена переменных начинаются с двух дефисов `--`. Пример: `--main-color: blue;`.",
          "var(--variable-name)": "Использование переменной. Используется для ссылки на значение переменной. Пример: `color: var(--main-color);`.",
          ":root": "Обычно переменные объявляются в `:root`, чтобы сделать их доступными глобально (для всего документа). Пример: `:root { --main-font-size: 16px; }`.",
          "Inheritance": "Переменные CSS наследуются, как и большинство других свойств CSS. Если переменная не определена для конкретного элемента, будет использоваться значение, определенное у его родителя или в `:root`."
        },
        "CSS Frameworks": {
          "Bootstrap": "Популярный CSS-фреймворк для создания адаптивных веб-сайтов. Предоставляет готовую систему сетки, компоненты UI и стили для быстрого прототипирования и разработки.",
          "Bulma": "CSS-фреймворк на основе Flexbox. Легкий, модульный и простой в использовании.",
          "Tailwind CSS": "Утилитарный CSS-фреймворк. Предоставляет низкоуровневые классы, которые можно комбинировать для создания стилей.",
          "Foundation": "CSS-фреймворк для адаптивного дизайна.  Предоставляет систему сетки, компоненты UI и другие инструменты для разработки.",
          "Materialize": "CSS-фреймворк, основанный на Material Design.",
          "Semantic UI": "CSS-фреймворк, ориентированный на семантику и удобство использования."
        },
          "Units":{
            "px": "Пиксели (абсолютная единица). Фиксированный размер, зависящий от разрешения экрана.",
            "em": "Относительно размера шрифта элемента. 1em равен размеру шрифта текущего элемента.  Используется для масштабирования относительно размера шрифта.",
            "rem": "Относительно размера шрифта корневого элемента (html). 1rem равен размеру шрифта корневого элемента.  Удобно для масштабирования всего интерфейса одним изменением.",
            "vw": "Относительно ширины области просмотра (1vw = 1% ширины).  Динамический размер, зависящий от ширины экрана.",
            "vh": "Относительно высоты области просмотра (1vh = 1% высоты).  Динамический размер, зависящий от высоты экрана.",
            "%": "Проценты (относительно родительского элемента).  Размер элемента задается в процентах от размера родительского элемента.",
            "pt": "Пункты (абсолютная единица).  Используется в основном для печати.",
            "pc": "Пики (абсолютная единица).  Используется в основном для печати.",
            "in": "Дюймы (абсолютная единица).",
            "cm": "Сантиметры (абсолютная единица).",
            "mm": "Миллиметры (абсолютная единица).",
            "fr": "Дробная единица (используется в Grid Layout).  Представляет собой долю свободного пространства в сетке.  Пример: `grid-template-columns: 1fr 2fr;` (второй столбец в два раза шире первого)."
          },
          "Accessibility": {
              "Outline": "Создает контур вокруг элемента. Используется для визуального выделения сфокусированных элементов.  Обеспечивает доступность для пользователей с ограниченным зрением.",
              "Focus states": "Стили для элементов, находящихся в фокусе (`:focus`). Важно для пользователей, которые используют клавиатуру для навигации по сайту.  Обеспечивают визуальную подсказку, какой элемент в данный момент активен.",
              "Screen Readers": "Обеспечение правильной семантики и доступности для пользователей с нарушениями зрения.  Важно использовать семантические HTML-элементы, предоставлять альтернативный текст для изображений (`alt`), использовать ARIA атрибуты.",
              "ARIA attributes": "Добавление ARIA атрибутов для улучшения доступности (например, `aria-label`, `aria-describedby`, `role`). ARIA (Accessible Rich Internet Applications) - набор атрибутов, которые используются для предоставления информации вспомогательным технологиям, таким как screen readers.",
              "Color Contrast": "Обеспечение достаточного контраста между текстом и фоном.  Важно для читаемости и доступности для пользователей с нарушениями зрения.  Используйте инструменты для проверки контраста.",
              "Keyboard Navigation": "Обеспечение возможности навигации по сайту с помощью клавиатуры.  Используйте семантические HTML-элементы, правильно используйте `tabindex`, обеспечивайте видимость фокуса."
          },
        "Preprocessors (Sass, Less, Stylus)": {
            "Sass (Syntactically Awesome Style Sheets)": "Популярный препроцессор CSS, добавляющий функциональность, такую как переменные, вложенность, миксины, функции и операторы, делая CSS более организованным и эффективным.  Файлы Sass имеют расширение `.scss` (синтаксис похож на CSS) или `.sass` (более компактный синтаксис).",
            "Less (Leaner Style Sheets)": "Другой популярный препроцессор CSS, аналогичный Sass, с поддержкой переменных, вложенности, миксинов и функций.  Использует синтаксис, похожий на CSS.",
            "Stylus": "Еще один препроцессор CSS, предлагающий гибкий синтаксис и мощные возможности для организации и оптимизации CSS.  Использует компактный синтаксис, поддерживающий переменные, вложенность, миксины и многое другое.",
            "Benefits of using Preprocessors": [
                "Code Organization: Позволяют создавать более организованный и модульный код.",
                "Variables: Упрощают управление цветами, шрифтами и другими значениями.",
                "Nesting: Упрощает написание сложных селекторов.",
                "Mixins: Позволяют повторно использовать фрагменты кода.",
                "Functions: Позволяют выполнять вычисления и логику в CSS.",
                "Code Reusability:  Упрощают повторное использование стилей."
            ]
        },
        "CSS-in-JS": {
            "Concept": "Подход, при котором CSS пишется в JavaScript.  Стили определяются как объекты JavaScript и применяются к элементам с помощью JS.",
            "Libraries": [
                "Styled Components: Популярная библиотека для создания CSS-in-JS компонентов в React.",
                "Emotion: Гибкая библиотека для CSS-in-JS, которая может использоваться с различными JavaScript-фреймворками.",
                "JSS:  Библиотека для написания CSS в JavaScript, использующая JavaScript-объекты для определения стилей."
            ],
            "Benefits": [
                "Component-Based Styling:  Стили связаны с компонентами, упрощая организацию и повторное использование.",
                "Dynamic Styling:  Позволяет динамически изменять стили на основе данных и состояния приложения.",
                "Scoped Styles:  Уменьшает конфликты стилей, обеспечивая scope стилей для каждого компонента.",
                "Code Organization:  Позволяет объединить стили и логику компонента в одном месте.",
                "Performance Considerations: Необходимо учитывать производительность и оптимизировать CSS-in-JS подходы."
            ]
        },
          "Web Design Principles": {
              "Whitespace (Negative Space)": "Использование пустого пространства для улучшения читаемости и визуального баланса.",
              "Hierarchy": "Визуальная организация элементов для направления взгляда пользователя.",
              "Balance": "Создание визуально приятных композиций.",
              "Contrast": "Использование контраста для выделения важных элементов.",
              "Repetition": "Повторение элементов для создания единства и ритма.",
              "Alignment": "Выравнивание элементов для организации и структуры."
          },
          "Performance Optimization": {
              "Minification": "Удаление лишних символов из CSS-кода для уменьшения размера файла.",
              "Concatenation": "Объединение нескольких CSS-файлов в один, чтобы уменьшить количество HTTP-запросов.",
              "Compression (Gzip)": "Сжатие CSS-файлов с помощью Gzip для уменьшения размера файла.",
              "Critical CSS": "Загрузка только тех стилей, которые необходимы для отображения видимой части страницы (above-the-fold).",
              "CSS Sprites": "Объединение нескольких изображений в одно, чтобы уменьшить количество HTTP-запросов для иконок и небольших изображений.",
              "Asynchronous Loading": "Загрузка CSS-файлов асинхронно, чтобы не блокировать рендеринг страницы.",
              "Remove Unused CSS": "Удаление ненужных CSS-правил для уменьшения размера файла.",
              "Optimize Selectors": "Использование эффективных селекторов для повышения производительности."
          }
      }
    }